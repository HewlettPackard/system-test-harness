Following libraries are available:

./cfg_01_gradle.sh :
   
    Loads configuration generated by gradle
   
    $resources_dir: Directory with gradle system test resources.
    $expanded_productA_simulator : Directory where productA test resources jar is extracted.
    $expanded_productB_simulator : Directory where productB test resources jar is extracted.
    $expanded_productC_simulator : Directory where productC test resources jar is extracted.

./cfg_02_dirs.sh :
    $cfg_tests_work_dir : path to working directory for tests

./cfg_50_proxy.sh :
    Configure proxy settings instead of system environment variables that are lost on Jenkins.

./cfg_61_example_productA.sh :
    ProductA configuration parameters for tests.
   
    Be sure not to export those variables as they'll override content of configuration files.
    $productA_kit_dir : A directory with kit of productA.
    $productA_install_root : Root directory where productA will be installed.
    $productARtListenPort : Network port where productA will listen for real time events.
    $productAActionListenPort : Network port where productA will listen for resynchronization requests from productB.
    $emsActionListenPort : Network port where EMS is expected to receive resynchronization requests.

./cfg_61_example_productB.sh :
    ProductB configuration parameters for tests.
    $productB_kit_dir : A directory with kit of productB.
    $platform_user : User account that should be used to run commands for ProductB.

./cfg_61_example_productC.sh :
    ProductC configuration parameters for tests.
    $productC_kit_dir : A directory with kit of productC.

./cfg_62_simulator.sh :
    Configuration of simulator.

./cfg_tests.sh :
   
    Defines test sets.
   
    $cfg_name : name of this test package
    Filters that define test sets and their properties.
      Inclusion filter:
        cfg_filter_include_<test set name>="<regexp>"
      Exclusion filter:
        cfg_filter_exclude_<test set name>="<regexp>"
        If either inclusion or exclusion filter is not specified
        then default one is used.
      Additional flags:
        cfg_filter_flags_<test set name>="<flags>"
      Flags could be:
        disable_traps - if test set fails then no hooks are run
      Required used:
        cfg_filter_user_<test set name>="<user name>"
        If required user is not set then user is not checked or changed automatically.
    $cfg_filter_include_default : default inclusion filter
        Used when no option is specified on command line or no inclusion
        pattern is specified for named filter.
    $cfg_filter_exclude_default : default exclusion filter
        Used when no option is specified on command line or no exclusion
        pattern is specified for named filter.

./lib_80_simulator.sh :
   
    Support functions for work with Groovy based per test case simulator.
   
    Function run_simulator :
	    Runs simulator and waits until it exits.
	    Usage: exec_expect_ok "[SIM_BASE_CP=$BUILD_DIR/libs/simulator/*] run_simulator [script] [param1 [param2 [...]]]"
	    By default, script is the same as test script name but with .sh replaced with .groovy.
	    If script doesn't end with .groovy then it is considered to be a script parameter instead.
	    Script is supposed to be in $bin_dir.
	    Groovy and other dependencies are supposed to be in BUILD_DIR/libs/simulator/.
	    Java is taken from $JAVA variable.
	    You can add an extra classpath directory using simulator_cp_extra variable.
	    This variable is evaluated dynamically so you can escape dollar within it and it
	    will be evaluated correctly at run time.
	    You can pass additional java options using SIM_JAVA_OPTS environment variable.

./lib_90_example_productA.sh :
    Functions specific to productA.
    $productA_home : ProductA installation directory.
    $productA_conf : Path to directory with configuration files of productA.
    $productA_cfg_adv : ProductA advanced configuration directory.
    $productA_cfg_cst : ProductA customization configuration directory.
    $productA_data : ProductA data directory.
    $productA_log : ProductA log directory.
    $productA_lib : ProductA library directory.
    $productA_log_file : Log file of productA.
    Function configure_productA_processing_trace :
	    Sets productA to flow tracing (permanently)
	    Usage: configure_productA_processing_trace
    Function configure_productA_full_trace :
	    Sets productA to full tracing (permanently)
	    Usage: configure_productA_full_trace
    Function configure_productA_production_trace :
	    Sets productA to production logging (permanently)
	    Usage: configure_productA_production_trace
    Function start_productA :
	    Start productA.
	    Usage: start_productA
    Function stop_productA :
	    Stop productA.
	    Usage: stop_productA
    Function restart_productA :
	    Restart productA.
	    Usage: restart_productA
    Function check_productA_installed :
	    Checks that adapters is installed
	    Usage: check_productA_installed
    Function get_productA_pid :
	    Gets process id of productA.
	    Usage: productA_pid=$(get_productA_pid)

./lib_90_example_productB.sh :
    Functions specific to productB.
    $productB_exploded_kit_dir : A directory where extracted productB kit is located
    $productB_log_java : Log for Java part
    $productB_log_platform : Log for Platform part
    $productB_default_trace_mask : Default trace mask
    $PRODUCTB_CONF_DIR : Path to directory with configuration files of AM.
    Function set_productB_platform_full_trace_for_current_process :
	    Sets ProductB to full logging (only for current process)
	    Usage: set_productB_platform_full_trace_for_current_process
    Function set_productB_platform_processing_trace_for_current_process :
	    Sets ProductB to flow tracing (only for current process)
	    Usage: set_productB_platform_processing_trace_for_current_process
    Function set_productB_platform_production_trace_for_current_process :
	    Sets ProductB to production logging (only for current process)
	    Usage: set_productB_platform_production_trace_for_current_process
    Function configure_productB_processing_trace_and_restart :
	    Sets ProductB to flow tracing (permanently)
	    Usage: configure_productB_processing_trace_and_restart
    Function configure_productB_full_trace_and_restart :
	    Sets ProductB to full tracing (permanently)
	    Usage: configure_productB_full_trace_and_restart
    Function configure_productB_production_trace_and_restart :
	    Sets ProductB to production logging (permanently)
	    Usage: configure_productB_production_trace_and_restart
    Function start_productB :
	    Start productB.
	    Usage: start_productB
    Function stop_productB :
	    Stop productB.
	    Usage: stop_productB
    Function restart_productB :
	    Restart productB.
	    Usage: restart_productB
    Function check_productB_installed :
	    Checks that productBs is installed
	    Usage: check_productB_installed
    Function check_productB_activated :
	    Checks that productBs is activated
	    Usage: check_productB_activated
    Function find_productB_jvm :
	    Gets the actual JVM used by AM.
	    ProductB must have been running as log is used to understand which JVM is used.
	    Usage: productB_jvm=$(find_productB_jvm)
    Function get_productB_pid :
	    Gets process id of AM.
	    Usage: productB_pid=$(get_productB_pid)

./lib_90_example_productC.sh :
    Functions specific to productC.
    $productC_exploded_kit_dir : A directory where extracted productC kit is located
    $PRODUCTC_CONF_DIR : Path to directory with configuration files of AM.

./lib_91_testset.sh :
    Function flow_prepare :
	    Cleanup and check OC for first EMS instance.
    Function flow_cleanup :
	    Cleanup OC for first EMS instance.
    Function flow_prepare_all :
	    Cleanup and check all OCs.
    Function flow_cleanup_all :
	    Cleanup all OCs.

./lib_92_jvm_leak.sh :
    A library to check ProductB JVM for memory leaks.
    Function dump_productB_heap :
	    Dumps ProductB heap statistics.
	    Usage: dump_productB_heap index
    Function check_productB_heap_for_leaks :
	    Run a trend check on heap dumps generated by dump_productB_heap.
	    Usage: check_productB_heap_for_leaks [ignore_patterens_list]
	    ignore_patterens_list - is a comma separated list of regexp patterns for class names
	    to be ignored during heap dump analysis.
    Function clean_productB_dumps :
	    Deletes dumps generated by dump_productB_heap.
	    Usage: clean_productB_dumps

